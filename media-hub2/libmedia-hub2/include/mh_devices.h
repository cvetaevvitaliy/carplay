/*
 * Generated by plugin-codegen.
 */
#ifndef __MH_DEVICES_H__
#define __MH_DEVICES_H__

#include <gio/gio.h>
#include <mh_api.h>
#include <mh_io.h>

/*
 * Type Macros
 */

#define MH_TYPE_DEVICES \
	(mh_devices_get_type())
#define MH_DEVICES(obj) \
	(G_TYPE_CHECK_INSTANCE_CAST((obj), MH_TYPE_DEVICES, MHDevices))
#define MH_IS_DEVICES(obj) \
	(G_TYPE_CHECK_INSTANCE_TYPE((obj), MH_TYPE_DEVICES))
#define MH_DEVICES_CLASS(klass) \
	(G_TYPE_CHECK_CLASS_CAST((klass), MH_TYPE_DEVICES, MHDevicesClass))
#define MH_IS_DEVICES_CLASS(klass) \
	(G_TYPE_CHECK_CLASS_TYPE((klass), MH_TYPE_DEVICES))
#define MH_DEVICES_GET_CLASS(obj) \
	(G_TYPE_INSTANCE_GET_CLASS((obj), MH_TYPE_DEVICES, MHDevicesClass))

typedef struct _MHDevicesClass	MHDevicesClass;

typedef enum _MHDev_type
{
	MH_DEV_USB,
	MH_DEV_IPOD,

	MH_DEV_MAX
} MHDev_type;	

struct _MHDevicesClass
{
	MHIoClass parent_class;

	/* Class Methods */

	gboolean (* output_request)( MHDevices *, GTask * );
};

struct _MHDevices
{
	MHIo parent;

	/* Instance Members */
	MHDev_type type;
	char * serial_number;

};

/* used by MH_TYPE_DEVICES */
GType mh_devices_get_type( void );

/* Methods List */

MHDevices * mh_devices_instance();
gboolean mh_devices_output_request( MHDevices * self );
void mh_devices_complete_output_request( MHDevices * self, GTask * task );

#endif /* __MH_DEVICES_H__ */
