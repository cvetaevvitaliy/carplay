/*
 * Generated by plugin-codegen.
 */
#ifndef __MH_PLAYER_H__
#define __MH_PLAYER_H__

#include <gio/gio.h>
#include <glib-object.h>
#include <mh_io.h>
#include <gst/gst.h>
/*
 * Type Macros
 */

#define MH_TYPE_PLAYER \
	(mh_player_get_type())
#define MH_PLAYER(obj) \
	(G_TYPE_CHECK_INSTANCE_CAST((obj), MH_TYPE_PLAYER, MHPlayer))
#define MH_IS_PLAYER(obj) \
	(G_TYPE_CHECK_INSTANCE_TYPE((obj), MH_TYPE_PLAYER))
#define MH_PLAYER_CLASS(klass) \
	(G_TYPE_CHECK_CLASS_CAST((klass), MH_TYPE_PLAYER, MHPlayerClass))
#define MH_IS_PLAYER_CLASS(klass) \
	(G_TYPE_CHECK_CLASS_TYPE((klass), MH_TYPE_PLAYER))
#define MH_PLAYER_GET_CLASS(obj) \
	(G_TYPE_INSTANCE_GET_CLASS((obj), MH_TYPE_PLAYER, MHPlayerClass))

typedef struct _MHPlayer		MHPlayer;
typedef struct _MHPlayerClass	MHPlayerClass;

typedef void * MHPlayerPropertyHandle;
typedef struct _MHPlayer* mh_player_handle;

typedef void ( * MHPlayerFunc )( MHPlayer * player, guint type, void * user_data, void * pbs_handle );

#define DEFAULT_PLAYBACK_RATE 1.0

typedef enum _MHPlayerEvent
{
	MH_PLAYER_EOS,
	MH_PLAYER_PTIME_CHANGE,
	MH_PLAYER_TAG_INFO,
	MH_PLAYER_ERROR,
	MH_PLAYER_BOS,
	MH_PLAYER_ERROR_NOT_EXIST,
	MH_PLAYER_FREQUENCY_ANALYSIS_RESULT,
} MHPlayerEvent;

typedef struct _MHPlayerEventsListener 
{
	MHPlayerFunc callback;
	void * user_data;
} MHPlayerEventsListener;	

typedef union {
	struct {
		guint current_time; 
	} ptime_info;
	struct {
		guint duration; 
	} duration_info;
	struct {
		gchar * title;
		gchar * artist;
		gchar * album;
	}tag_info;
	struct {
		guint index;		/*  *<the item index allocated in the list. */
		gchar * uri;		/*  *<The handle string for a file.*/
		gchar * name;
	} track_info;
}MHPlayerInfoData;

typedef struct {
	gchar * title;
	gchar * artist;
	gchar * album;
	gchar * genre;
} MHPlayerMetadata;

typedef enum{
	MH_PLAYER_USB_PIPELINE = 0,
	MH_PLAYER_IAP2_DEVICE_MODE_PIPELINE,
	MH_PLAYER_IAP2_HOST_MODE_PIPELINE,
} MHPlayerPipelineType;

struct _MHPlayerClass
{
	GObjectClass parent_class;

	/* Class Ios */

	/* Class Methods */
	void (* set_source)( MHPlayer *, gpointer );
	gboolean (* set_video_sink)( MHPlayer *, gpointer );
	void (* set_audio_sink)( MHPlayer *, gpointer );
	gboolean (* set_audio_track)( MHPlayer *, guint );
	gboolean (* set_subtitle)( MHPlayer *, guint );
	gboolean (* resize)( MHPlayer *, guint, guint, guint, guint );
	gboolean (* pixel_aspect_ratio)( MHPlayer *, guint, guint );
	gboolean (* seek)( MHPlayer *, guint );
	gboolean (* set_rate)( MHPlayer *, gdouble );
	gboolean (* play)( MHPlayer * );
	gboolean (* pause)( MHPlayer * );
	gboolean (* stop)( MHPlayer * );
	gboolean (* close)( MHPlayer * );
	gboolean (* set_media_location)( MHPlayer *, const gchar * );
	gboolean (* set_volume)( MHPlayer *, gdouble );
	void (* mute)( MHPlayer * );
	void (* rotate)( MHPlayer *, guint );
	void (* set_playback_rate)( MHPlayer *, gdouble );
	gboolean (* forward)( MHPlayer * );
	gboolean (* backward)( MHPlayer * );
	gboolean (* forward_done)( MHPlayer * );
	gboolean (* backward_done)( MHPlayer * );
	MHPbTrackInfo * (* get_track_info)( MHPlayer * );
	MHPbSubtitleInfo * (* get_subtitle_info)( MHPlayer * );
	void (* set_ptime_source)( MHPlayer * );
	gboolean (* set_intvaltime)( MHPlayer *, guint );
	/* Class Properties */
};

struct _MHPlayer
{
	GObject parent;
//	MHPlayerClass * klass;
//	MHPlayerPropertyHandle property_handle;
	/* Instance Members */
	MHPb * pb;
	GstElement * playbin2;
	GstElement * playbin2_normal;
	GstElement * playbin2_mpeg4;
	gboolean playbin2_state;
};

/* used by MH_TYPE_PLAYER */
GType mh_player_get_type( void );

/* Ios List */

MHPlayer * mh_player_open();
void mh_player_set_source_by_name( MHPlayer * self, gpointer name );
void mh_player_set_source( MHPlayer * self, gpointer name );
gboolean mh_player_set_video_sink( MHPlayer * self, gpointer name );
void mh_player_set_audio_sink( MHPlayer * self, gpointer name );
void mh_player_set_audio_track( MHPlayer * self, guint track );
void mh_player_set_subtitle( MHPlayer * self, guint subtitle );
gboolean mh_player_resize( MHPlayer * self, guint offsetx, guint offsety, guint width, guint height );
gboolean mh_player_pixel_aspect_ratio( MHPlayer * self, guint pixel_n, guint pixel_d );
gboolean mh_player_seek( MHPlayer * self, guint position );
gboolean mh_player_set_rate( MHPlayer * self, gdouble rate );
gboolean mh_player_play( MHPlayer * self );
gboolean mh_player_pause( MHPlayer * self );
gboolean mh_player_stop( MHPlayer * self );
void mh_player_close( MHPlayer * self );
void mh_player_set_media_location( MHPlayer * self, const gchar * location );
void mh_player_set_volume( MHPlayer * self, gdouble volume );
void mh_player_mute( MHPlayer * self );
void mh_player_rotate( MHPlayer * self, guint value );
void mh_player_set_playback_rate( MHPlayer * self, gdouble rate );
void mh_player_forward( MHPlayer * self );
void mh_player_backward( MHPlayer * self );
void mh_player_forward_done( MHPlayer * self );
void mh_player_backward_done( MHPlayer * self );
MHPbTrackInfo * mh_player_get_track_info( MHPlayer * self );
MHPbSubtitleInfo * mh_player_get_subtitle_info( MHPlayer * self );
void mh_player_set_ptime_source( MHPlayer * self );
void mh_player_set_intvaltime( MHPlayer * self, guint intvaltime );
#endif /* __MH_PLAYER_H__ */
