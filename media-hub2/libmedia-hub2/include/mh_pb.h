/*
 * Generated by plugin-codegen.
 */
#ifndef __MH_PB_H__
#define __MH_PB_H__

#include <gio/gio.h>
#include <mh_api.h>
#include <mh_io.h>

/*
 * Type Macros
 */

#define MH_TYPE_PB \
	(mh_pb_get_type())
#define MH_PB(obj) \
	(G_TYPE_CHECK_INSTANCE_CAST((obj), MH_TYPE_PB, MHPb))
#define MH_IS_PB(obj) \
	(G_TYPE_CHECK_INSTANCE_TYPE((obj), MH_TYPE_PB))
#define MH_PB_CLASS(klass) \
	(G_TYPE_CHECK_CLASS_CAST((klass), MH_TYPE_PB, MHPbClass))
#define MH_IS_PB_CLASS(klass) \
	(G_TYPE_CHECK_CLASS_TYPE((klass), MH_TYPE_PB))
#define MH_PB_GET_CLASS(obj) \
	(G_TYPE_INSTANCE_GET_CLASS((obj), MH_TYPE_PB, MHPbClass))

typedef struct _MHPb		MHPb;
typedef struct _MHPbClass	MHPbClass;

struct _MHPbClass
{
	MHIoClass parent_class;

	MHPbTrackInfo * ( *get_track_info)( MHPb *);
	MHPbSubtitleInfo * ( *get_subtitle_info)( MHPb *);
	/* Class Ios */

	/* Class Methods */

	/* Class Properties */
};

typedef enum _MHPbStatusEvent
{
	READY_STATUS = 1,
	PLAY_STATUS,
	PAUSE_STATUS,
	SWITCHING_STATUS,
	SEEKING_STATUS,
	ERROR_STATUS,
} MHPbStatusEvent;				/* ----------  end of enum MHPbStatusEvent  ---------- */

typedef enum _MHPbEvent
{
	EVENT_CHANGE,
	EVENT_READY,
	EVENT_PLAY,
	EVENT_PAUSE,
	EVENT_SWITCHING_NEXT,
	EVENT_SWITCHING_PREVIOUS,
	EVENT_SWITCHING_SELECT,
	EVENT_SWITCHING_REPEAT_ONE,
	EVENT_SEEKING,
	EVENT_SEEKING_FORWARD,
	EVENT_SEEKING_BACKWARD,
	EVENT_SEEKING_FORWARD_DONE,
	EVENT_SEEKING_BACKWARD_DONE,
	EVENT_ERROR,

	PB_EVENT_NUM
} MHPbEvent;				/* ----------  end of enum MHPbEvent  ---------- */

struct _MHPb
{
	MHIo parent;
	MHDev * mhDev;
	MHPlaylist * playlist;

	MHPlayer * mh_player; 
	MHPbUserCallback mh_user_cbfunc;
	GSource * error_source;
	GSource * state_error_source;
	uint32_t play_direction;   /*   1:previous, 2:next */ 
	uint32_t shuffle_start_index;
	uint32_t seeking_pos;
	char * video_sink_name;
	char * audio_sink_name;
	char * device_name;
	uint32_t buffer_time;
	MHPbRepeatMode repeat_mode;
	MHPbShuffleMode shuffle_mode;

	uint32_t window_layer;	
	gboolean force_aspect_ratio;
	uint32_t disp_x;
	uint32_t disp_y;
	uint32_t disp_width;
	uint32_t disp_height;
	uint32_t pixel_n;
	uint32_t pixel_d;

	char * streamid;
	char * siri_streamid;
	char * tele_streamid;
	char * alt_streamid;

	uint32_t surfaceid;
	void * pipeline;
	gdouble rate;
	char * octave_period;
	char * octave_bands;
	char * octave_enable;
};

/* used by MH_TYPE_PB */
GType mh_pb_get_type( void );

/* Ios List */

//MHPb * mh_pb_instance();

void mh_pb_dispatch( MHPb * pb, guint event, gpointer param1, gpointer param2 );
void mh_pb_state_open( MHPb * pb, guint type, gpointer param1 );
void mh_pb_set_media_info( MHPb * pb, guint type, void * user_data );
void mh_pb_playlist_by_change( MHPb * self, MHPlaylist * playlist );
#endif /* __MH_PB_H__ */
