/*
 * Generated by plugin-codegen.
 */
#ifndef __MH_DEV_H__
#define __MH_DEV_H__

#include <gio/gio.h>
#include <mh_io.h>
#include <mh_filter.h> 
/*
 * Type Macros
 */

#define MH_TYPE_DEV \
	(mh_dev_get_type())
#define MH_DEV(obj) \
	(G_TYPE_CHECK_INSTANCE_CAST((obj), MH_TYPE_DEV, MHDev))
#define MH_IS_DEV(obj) \
	(G_TYPE_CHECK_INSTANCE_TYPE((obj), MH_TYPE_DEV))
#define MH_DEV_CLASS(klass) \
	(G_TYPE_CHECK_CLASS_CAST((klass), MH_TYPE_DEV, MHDevClass))
#define MH_IS_DEV_CLASS(klass) \
	(G_TYPE_CHECK_CLASS_TYPE((klass), MH_TYPE_DEV))
#define MH_DEV_GET_CLASS(obj) \
	(G_TYPE_INSTANCE_GET_CLASS((obj), MH_TYPE_DEV, MHDevClass))

typedef struct _MHDev		MHDev;
typedef struct _MHDevClass	MHDevClass;

typedef void ( * MHDevCallback )( MHDev * dev, guint type, void * user_data, void * pbs_handle ); 

typedef struct _MHDevPbEventsListener 
{
	MHDevCallback callback;
	void * user_data;
} MHDevPbEventsListener;			/* ----------  end of struct MHDevPbEventsListener  ---------- */

struct _MHDevClass
{
	MHIoClass parent_class;

	/* Class Ios */

	/* Class Methods */
	void (* play_by_list)( MHDev *, MHPb *, MHPlaylist * );
	void (* play_radio_by_index)( MHDev *, MHPb *, uint32_t );
	void (* stop)( MHDev *, MHPb * );
	void (* close)( MHDev *, MHPb * );
	void (* play)( MHDev *, MHPb * );
	void (* pause)( MHDev *, MHPb * );
	void (* play_pause)( MHDev * );
	void (* resume)( MHDev * );
	void (* forward)( MHDev *, MHPb * );
	void (* forward_done)( MHDev *, MHPb * );
	void (* backward)( MHDev *, MHPb * );
	void (* backward_done)( MHDev *, MHPb * );
	void (* set_index)( MHDev *, MHPb *, uint32_t );
	void (* set_speed)( MHDev *, guint );
	void (* set_repeat)( MHDev *, MHPb * );
	void (* set_shuffle)( MHDev *, MHPb * );
	void (* set_rate)( MHDev *, MHPb * );
	void (* set_buffer_time)( MHDev * );
	void (* start_scan)( MHDev *, MHDevScanType );
	void (* next)( MHDev *, MHPb * );
	void (* previous)( MHDev *, MHPb * );
	void (* seek)( MHDev *, MHPb *, uint32_t );
	void (* playlist_change)( MHDev *, MHPb *, MHPlaylist *);
	MHPlaylist * (* create_playlist)( MHDev * );
	MHCol *(* create_collection)( MHDev * );
	void (* dev_detach)(MHDev *);
	MHFolder * (* get_root)(MHDev *);
	uint32_t (* register_detach_listener)( MHDev *, MHDevDetachListener * );
	uint32_t (* register_events_listener)( MHDev *, MHDevEventsListener * );
	MHPlaylistInfo * ( *get_playlist_info)( MHDev *);
	MHPlaylist * (* restore_playlist)( MHDev *, gint64 );
	void (* resize)( MHDev *, MHPb *, uint32_t, uint32_t, uint32_t, uint32_t );
	void (* pixel_aspect_ratio)( MHDev *, MHPb *, uint32_t, uint32_t );
	void (* set_video_sink)( MHDev *, MHPb *, const char * );
	void (* set_media_info)( MHDev *, MHPb *, guint, void * );

	void ( * save_playlist) ( MHDev *, const char *, MHPlaylist *);
	void (* update_playlist)( MHDev *, const char *, MHPlaylist *, gint64);
	void (* delete_playlist)( MHDev *, gint64 );
	char ** (* get_radiolist)( MHDev *, int * );
	void (* attach_pb)( MHDev *, MHPb * );
	void (* signal_emit_by_name )( MHDev *, const char *, va_list );	
	void (* scan_abort )( MHDev * );
	MHResult (* request_app_launch )( MHDev * , const char *  );
	int32_t (* write_ea_data)( MHDev * , const uint8_t * , int32_t );
	MHItem *(* get_item_by_uri)(MHDev *, const char *);
	MHPlaylist * (*create_empty_playlist)(MHDev *);
	void (* set_pipeline_status)( MHDev *, MHPb *, uint32_t );
	void (* audiobook_playback_speed)( MHDev *, MHPb *, uint32_t );
	void (* send_signal_touch)( MHDev *, MHTouchType, guint, guint);
	void (* start)( MHDev *);
	void (* register_status_listener)( MHDev *, MHDevStatusListener *);
	MHItem * (* add_file)( MHDev * , MHFolder *, MHItem *);
	MHResult (* delete_file)( MHDev *, MHItem *);
	MHResult (* write_location_data )( MHDev * , const char * );
	MHResult (* send_vehicle_status )( MHDev * , uint32_t, int32_t, int32_t );

	MHResult (* register_module_status)( MHDev *, ModuleStatusListener * );
	int32_t (* write_bt_data)( MHDev * , const uint8_t * , int32_t );
	MHResult (* send_wifi_conf_info)( MHDev * , const uint8_t * , const uint8_t *, uint8_t, uint8_t );
	MHResult (* wifi_write_iap2)( MHDev * , guint8 *, gint );

	int32_t (* write_ea_native_data)( MHDev * , const uint8_t * , int32_t );
	MHItem **(* search_name)( MHDev *, MHItemType, char *, int32_t *);
	/* Class Properties */
};

struct _MHDev
{
	MHIo parent;
	/* Instance Members */
	gint64 uniqueId;
	gchar * type;
	gchar * entry;
	gchar * serial;
	gchar * pid;
	gchar * vid;
	GHashTable * itemsHash;
	bool dev_status;
	MHDevScanType	scanType;
	MHDevSearchType searchType;
	MiscIapDeviceMode iapType;
	gchar * devPath;
};

/* used by MH_TYPE_DEV */
GType mh_dev_get_type( void );

/* Ios List */
void mh_dev_play_by_list( MHDev * self, MHPb * pb, MHPlaylist * playlist );
void mh_dev_play_radio_by_index( MHDev * self, MHPb * pb, uint32_t index );
void mh_dev_stop( MHDev * self, MHPb * pb );
void mh_dev_close( MHDev * self, MHPb * pb );
void mh_dev_play( MHDev * self, MHPb * pb );
void mh_dev_pause( MHDev * self, MHPb * pb );
void mh_dev_play_pause( MHDev * self );
void mh_dev_resume( MHDev * self );
void mh_dev_forward( MHDev * self, MHPb * pb );
void mh_dev_forward_done( MHDev * self, MHPb * pb );
void mh_dev_backward( MHDev * self, MHPb * pb );
void mh_dev_backward_done( MHDev * self, MHPb * pb );
void mh_dev_set_index( MHDev * self, MHPb * pb, uint32_t index );
void mh_dev_set_speed( MHDev * self, guint speed );
void mh_dev_set_repeat( MHDev * self, MHPb * pb );
void mh_dev_set_shuffle( MHDev * self, MHPb * pb );
void mh_dev_set_rate( MHDev * self, MHPb * pb );
void mh_dev_set_buffer_time( MHDev * self );
void mh_dev_next( MHDev * self, MHPb * pb );
void mh_dev_previous( MHDev * self, MHPb * pb );
void mh_dev_seek( MHDev * self, MHPb * pb, uint32_t second );
void mh_dev_playlist_change( MHDev * self, MHPb * pb, MHPlaylist * playlist );
void mh_dev_resize( MHDev * self, MHPb * pb, uint32_t offsetx, uint32_t offsety, uint32_t width, uint32_t height ); 
void mh_dev_pixel_aspect_ratio( MHDev * self, MHPb * pb, uint32_t pixel_n, uint32_t pixel_d );
void mh_dev_set_video_sink( MHDev * self, MHPb * pb, const char * video_sink_name );
void mh_dev_set_media_info( MHDev * self, MHPb * pb, guint type, void * user_data );
void mh_dev_signal_emit_by_name( MHDev * self, const char * signal_name,...); 
void mh_dev_set_pipeline_status( MHDev * self, MHPb * pb, uint32_t status );
void mh_dev_audiobook_playback_speed( MHDev * self, MHPb * pb, uint32_t speed );

MHResult mh_dev_wifi_write_iap2( MHDev * self, guint8 * buf, gint len );
#endif /* __MH_DEV_H__ */
