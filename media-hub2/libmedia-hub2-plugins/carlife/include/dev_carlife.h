/*
 * Generated by plugin-codegen.
 */
#ifndef __MH_DEV_CARLIFE_H__
#define __MH_DEV_CARLIFE_H__

#include <gio/gio.h>
#include <mh_dev.h>
#include <gst/gst.h>
#include <mh_pb.h>
#include <mh_carlife.h>
#include <CTransPackageProcess.h>
/*
 * Type Macros
 */

#define MH_TYPE_DEV_CARLIFE \
	(mh_dev_carlife_get_type())
#define MH_DEV_CARLIFE(obj) \
	(G_TYPE_CHECK_INSTANCE_CAST((obj), MH_TYPE_DEV_CARLIFE, MHDevCarlife))
#define MH_IS_DEV_CARLIFE(obj) \
	(G_TYPE_CHECK_INSTANCE_TYPE((obj), MH_TYPE_DEV_CARLIFE))
#define MH_DEV_CARLIFE_CLASS(klass) \
	(G_TYPE_CHECK_CLASS_CAST((klass), MH_TYPE_DEV_CARLIFE, MHDevCarlifeClass))
#define MH_IS_DEV_CARLIFE_CLASS(klass) \
	(G_TYPE_CHECK_CLASS_TYPE((klass), MH_TYPE_DEV_CARLIFE))
#define MH_DEV_CARLIFE_GET_CLASS(obj) \
	(G_TYPE_INSTANCE_GET_CLASS((obj), MH_TYPE_DEV_CARLIFE, MHDevCarlifeClass))

typedef struct _MHDevCarlife		MHDevCarlife;
typedef struct _MHDevCarlifeClass	MHDevCarlifeClass;

struct _MHDevCarlifeClass
{
	MHDevClass parent_class;

	void (* register_status_listener)( MHDev *, MHDevStatusListener *);

	/* Class Ios */
	
	/* Class Methods */

	/* Class Properties */
};

typedef struct _audioParam_t 
{
	GstElement * pipeline;
	GstElement * audioSink;
	GstElement	* src;

	GMainLoop * mainloop;
	GMainContext * context;
	GThread * thread;

	char * client_name;

	uint32_t sampleRate;
	uint32_t channelConfig;
	uint32_t sampleFormat;
} audioParam_t;				/* ----------  end of struct audioParam_t  ---------- */

typedef struct _videoParam_t 
{
	GstElement * pipeline;
	GstElement * videoSink;
	GstElement * src;

	GMainLoop * mainloop;
	GMainContext * context;
	GThread * thread;

	uint32_t width;
	uint32_t height;
	uint32_t frameRate;
	
	uint64_t startticks;
} videoParam_t;				/* ----------  end of struct videoParam_t  ---------- */

typedef struct _naviParam_t 
{
	GstElement * pipeline;
	GstElement * audioSink;
	GstElement * src;

	GMainLoop * mainloop;
	GMainContext * context;
	GThread * thread;

	char * client_name;

	uint32_t sampleRate;
	uint32_t channelConfig;
	uint32_t sampleFormat;

	uint32_t bytes_second;

} naviParam_t;				/* ----------  end of struct ttsParam_t  ---------- */


typedef struct _VRttsParam_t 
{
	GstElement * pipeline;
	GstElement * audioSink;
	GstElement * src;

	GMainLoop * mainloop;
	GMainContext * context;
	GThread * thread;

	char * client_name;

	uint32_t sampleRate;
	uint32_t channelConfig;
	uint32_t sampleFormat;

	uint32_t bytes_second;

	GstState state;

} VRttsParam_t;				/* ----------  end of struct VRttsParam_t  ---------- */

typedef struct _VRRecordParam_t 
{
	int Mic_flag;

	GMainLoop * mainloop;
	GMainContext * context;
	GThread * thread;


} VRRecordParam_t;				/* ----------  end of struct VRRecordParam_t  ---------- */


typedef struct _PipelineParam_t 
{
	GMainLoop * mainloop;
	GMainContext * context;
	GThread * thread;

} PipelineParam_t;				/* ----------  end of struct PipelineParam_t  ---------- */



struct _MHDevCarlife
{
	MHDev parent;

	pthread_t cmd_thread;
	pthread_t video_thread;
	pthread_t media_thread;
	pthread_t tts_thread;
	pthread_t vr_thread;
	char * android_version;
	bool exist;
	uint32_t width;
	uint32_t height;
	uint32_t frameRate;
	
	audioParam_t	* audio_param;
	videoParam_t 	* video_param;
	naviParam_t * navi_param;
	VRttsParam_t * VRtts_param;
	PipelineParam_t * pipe_param;
	
	VRRecordParam_t * VRRecord_param;

	bool bdim_flag;
	bool bdim_jar_flag;
	bool dalvik_flag;
	bool bdsc_flag;
  
	bool versionFlag;
	MHPb * pb;

	ModuleStatusListener * MSlistener;

	MHCarlifeLaunchMode launch_mode;

	char * video_sink_name;
	char * audio_sink_name;
	uint32_t surfaceid;

	////bt////
	char * md_bt_address;
	char * md_bt_passKey;

	char * md_os;
	MHDev * iap2Dev;
	uint32_t session_id;

	uint8_t sendPackage[IOS_CMD_DATA_SIZE];

	char * buf;
	uint32_t bufSize;
	uint32_t bufLoc;
	
	MHDevStatus status;
	bool detachFlag;

	
	
	/* Instance Members */

};

/* used by MH_TYPE_DEV_CARLIFE */
GType mh_dev_carlife_get_type( void );
#define MAX_CMD_RET_LENGTH 1024*20
/* Ios List */
typedef struct _Cmd_Ret 
{
	gboolean ret;
	uint8_t data[MAX_CMD_RET_LENGTH];
	uint32_t len;
} Cmd_Ret;				/* ----------  end of struct Cmd_Ret  ---------- */

Cmd_Ret * Cmd_With_Result( const char * cmd);
gboolean doCmd( const char * cmd);

#endif /* __MH_DEV_CARLIFE_H__ */
